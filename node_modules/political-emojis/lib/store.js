var twitterEmojiStream = require("twitter-emoji-stream");
var mysql = require("mysql");
var fs = require("fs");
var regenerate = require('regenerate');
var express = require("express");
var app = express();
var moment = require('moment');


var io;
module.exports = {}

module.exports.app = app;



module.exports.acceptConnections = function(server, callback){
	io = require('socket.io')(server);
	io.on('connection', function (socket) {
			console.log("connected");
		});
}

	

module.exports.filterPoliticalEmojis = function(server){
	
	// Get list of candidates
	var candidates = JSON.parse(fs.readFileSync("candidates.json"));

	app.get("/api/connect", function(request, response){
		console.log("boooo");
	});

	// Build regex string
	var candidate_re = new RegExp(candidates.map(function(d){ return d.last_name.toLowerCase() }).join('|'), 'g')
	var candidates_array = candidates.map(function(d){ return d.full_name.toLowerCase() });

	var stream = new twitterEmojiStream({ 
		consumer_key: process.env.CONSUMER_KEY, 
		consumer_secret: process.env.CONSUMER_SECRET, 
		access_token_key: process.env.ACCESS_TOKEN_KEY,
		access_token_secret: process.env.ACCESS_TOKEN_SECRET
	}, candidates_array, function(err, data){
		if(err) throw err;

		// Grab candidate names
		data.candidates = (data.tweet + " " + data.quoted_tweet + " " + data.quoted_tweeter).toLowerCase().match(candidate_re);
		console.log(data);
		var used_candidates = [];
		if(data.candidates){
			data.candidates.forEach(function(candidate){
				var used_emojis = [];
				if( used_candidates.indexOf(candidate) == -1 ){
					used_candidates.push(candidate);
					data.emojis.forEach(function(emoji){
						if( used_emojis.indexOf(emoji) == -1 ){
							used_emojis.push(emoji);
							data.link = "http://twitter.com/" + data.author + "/status/" + data.id;
							pool.getConnection(function(err, connection){
								if(err) throw err;
								var today = new Date();
								var today = today.getFullYear() + "-" + (today.getMonth() + 1) + "-" + today.getDate() + " " + today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
								connection.query('INSERT INTO emoji_counts (candidate, emoji, text, link, datestamp) values (?, ?, ?, ?, ?)', [candidate, emoji, data.tweet, data.link, today], function(err){ 
									if(err) throw err; 
									connection.release();
								});
							});

							// Check to see if these are modifier emoji we're not interested in streaming
							if(!new RegExp(/\uD83C[\uDFFB-\uDFFF]/).test(emoji))
								io.emit("tweet", { link: data.link, candidate: candidate, emoji: emoji });
						}					
					});
				}
			});
		}
		
		

		console.log(data.tweet);
		console.log(data.candidates);

	});
}




module.exports.buildList = function(server){
	pool.getConnection(function(err, connection){
		if(err) throw err;
		connection.query('SELECT emoji_counts.candidate, emoji_counts.emoji, COUNT(emoji_counts.emoji) as count, links.link FROM emoji_counts join (select candidate, emoji, link from (select * from emoji_counts order by id desc) as emoji_counts group by candidate, emoji) as links on links.candidate = emoji_counts.candidate and links.emoji = emoji_counts.emoji WHERE datestamp >= "' + moment(new Date()).subtract(1, "days").format("YYYY-MM-DD HH:mm:SS") + '" AND datestamp <= "' + moment(new Date()).format("YYYY-MM-DD HH:mm:SS") + '" GROUP BY emoji_counts.candidate, emoji_counts.emoji ORDER BY candidate desc, count DESC', function(err, rows){ 
			if(err) throw err; 
			connection.release();
			
			var candidates = [];
		
			rows.forEach(function(row){
				var index = candidates.map(function(d){ return d.name }).indexOf(row.candidate);
				if( index == -1 ){
					candidates.push({ name: row.candidate, total: 0, emojis: [] });
					index = candidates.length - 1;
				}
				candidates[index].emojis.push({ emoji: row.emoji, count: row.count, link: row.link })
				candidates[index].total += row.count;
			});
			
			// Sort by most popular candidates
			candidates.sort(function(a,b){
				return b.total - a.total;
			})
			
			fs.writeFile("./list_dump.json", JSON.stringify(candidates));
		});
	});
}